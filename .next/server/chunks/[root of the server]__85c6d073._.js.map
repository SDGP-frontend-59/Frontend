{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/senujidesilva/Desktop/Frontend/app/minebot/prompt.ts"],"sourcesContent":["import { readFileSync } from \"fs\";\nimport { join } from \"path\";\n\nconst contextPath = join(process.cwd(), \"app/minebot/context.txt\");\nconst CONTEXT = readFileSync(contextPath, \"utf-8\");\n\nexport const SYSTEM_PROMPT = `You are MineBot, a specialized AI assistant for mining and sustainability at Ceylon Mine. Be concise, professional, and focus on mining expertise.\n\nKey traits:\n• Expert in mining operations, sustainability, and environmental practices\n• Knowledge of mining technology and industry trends\n• Professional yet approachable tone\n• Clear, simple explanations of complex topics\n\nFocus on:\n• Sustainable mining practices\n• Environmental protection\n• Mining technology\n• Safety protocols\n• Resource management\n\nResponse Format:\n• Use markdown formatting for better readability\n• Use **bold** for emphasis\n• Use \\`code\\` for technical terms\n• Use bullet points for lists\n• Use ### for subheadings when organizing information\n• Include tables when comparing data\n• Use > for important quotes or highlights\n\nLimitations:\n• Don't give financial advice\n• Don't share confidential details\n• Refer to experts for specific business inquiries\n\nImportant Instructions:\n• Always respond in the same language as the user's message\n• If the user's message is in a different language, respond in English\n• Don't generate HTML\n• If user asks anything irrelevant to mining, just say \"I'm sorry, I can only help with mining related questions.\"\n\nCEYLONMINE CONTEXT AND KNOWLEDGE BASE:\n\n${CONTEXT}\n\nKeep responses focused, factual, and relevant to mining operations. Use the above context to provide accurate information about CeylonMine's features, processes, and capabilities.`;\n\nexport interface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,cAAc,CAAA,GAAA,iGAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI;AACxC,MAAM,UAAU,CAAA,GAAA,6FAAA,CAAA,eAAY,AAAD,EAAE,aAAa;AAEnC,MAAM,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqC9B,EAAE,QAAQ;;mLAEyK,CAAC","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///Users/senujidesilva/Desktop/Frontend/app/api/chat/route.ts"],"sourcesContent":["import OpenAI from \"openai\";\nimport { NextResponse } from \"next/server\";\nimport { SYSTEM_PROMPT } from \"@/app/minebot/prompt\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\n// Ensure API key is available\nif (!process.env.OPENAI_API_KEY) {\n  console.error(\"OPENAI_API_KEY is not set\");\n}\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Common headers for all responses\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  \"Cache-Control\": \"no-store, no-cache, must-revalidate\",\n};\n\nexport async function POST(request: Request) {\n  try {\n    // Check API key\n    if (!process.env.OPENAI_API_KEY) {\n      return NextResponse.json(\n        { error: \"OpenAI API key is not configured\" },\n        { status: 500, headers }\n      );\n    }\n\n    const body = await request.json();\n    const { messages, input } = body;\n\n    if (!input) {\n      return NextResponse.json(\n        { error: \"Input message is required\" },\n        { status: 400, headers }\n      );\n    }\n\n    console.log(\"Received message:\", input);\n\n    // Format messages for OpenAI\n    const formattedMessages = [\n      { role: \"system\", content: SYSTEM_PROMPT },\n      ...messages.map((msg: Message) => ({\n        role: msg.role,\n        content: msg.content,\n      })),\n      { role: \"user\", content: input },\n    ];\n\n    console.log(\"Sending request to OpenAI...\");\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: formattedMessages,\n      temperature: 0.7,\n      max_tokens: 1000,\n    });\n\n    const response = completion.choices[0]?.message?.content;\n\n    if (!response) {\n      return NextResponse.json(\n        { error: \"Empty response from OpenAI API\" },\n        { status: 500, headers }\n      );\n    }\n\n    console.log(\"Received response from OpenAI\");\n\n    return NextResponse.json(\n      { message: { role: \"assistant\", content: response } },\n      { headers }\n    );\n  } catch (error: any) {\n    console.error(\"Error in chat API:\", error);\n\n    if (error.name === \"SyntaxError\") {\n      return NextResponse.json(\n        {\n          error: \"Invalid JSON in request body\",\n          details: error.message,\n        },\n        { status: 400, headers }\n      );\n    }\n\n    if (error.status === 401 || error.status === 403) {\n      return NextResponse.json(\n        {\n          error: \"Authentication error with OpenAI\",\n          details: error.message,\n        },\n        { status: error.status, headers }\n      );\n    }\n\n    return NextResponse.json(\n      {\n        error: \"Failed to generate response\",\n        details: error.message || \"Unknown error occurred\",\n      },\n      { status: 500, headers }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAOA,8BAA8B;AAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;IAC/B,QAAQ,KAAK,CAAC;AAChB;AAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEA,mCAAmC;AACnC,MAAM,UAAU;IACd,gBAAgB;IAChB,iBAAiB;AACnB;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,gBAAgB;QAChB,IAAI,CAAC,QAAQ,GAAG,CAAC,cAAc,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;gBAAK;YAAQ;QAE3B;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;QAE5B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;gBAAK;YAAQ;QAE3B;QAEA,QAAQ,GAAG,CAAC,qBAAqB;QAEjC,6BAA6B;QAC7B,MAAM,oBAAoB;YACxB;gBAAE,MAAM;gBAAU,SAAS,0HAAA,CAAA,gBAAa;YAAC;eACtC,SAAS,GAAG,CAAC,CAAC,MAAiB,CAAC;oBACjC,MAAM,IAAI,IAAI;oBACd,SAAS,IAAI,OAAO;gBACtB,CAAC;YACD;gBAAE,MAAM;gBAAQ,SAAS;YAAM;SAChC;QAED,QAAQ,GAAG,CAAC;QACZ,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,OAAO;YACP,UAAU;YACV,aAAa;YACb,YAAY;QACd;QAEA,MAAM,WAAW,WAAW,OAAO,CAAC,EAAE,EAAE,SAAS;QAEjD,IAAI,CAAC,UAAU;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;gBAAK;YAAQ;QAE3B;QAEA,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;gBAAE,MAAM;gBAAa,SAAS;YAAS;QAAE,GACpD;YAAE;QAAQ;IAEd,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sBAAsB;QAEpC,IAAI,MAAM,IAAI,KAAK,eAAe;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS,MAAM,OAAO;YACxB,GACA;gBAAE,QAAQ;gBAAK;YAAQ;QAE3B;QAEA,IAAI,MAAM,MAAM,KAAK,OAAO,MAAM,MAAM,KAAK,KAAK;YAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS,MAAM,OAAO;YACxB,GACA;gBAAE,QAAQ,MAAM,MAAM;gBAAE;YAAQ;QAEpC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO,IAAI;QAC5B,GACA;YAAE,QAAQ;YAAK;QAAQ;IAE3B;AACF","debugId":null}}]
}