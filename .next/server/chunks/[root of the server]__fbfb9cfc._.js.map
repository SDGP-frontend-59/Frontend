{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///Users/senujidesilva/Desktop/Frontend/app/utility/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,wBAAwB;AACxD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,6BAA6B;AAE1D,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///Users/senujidesilva/Desktop/Frontend/app/api/auth/check/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport jwt from 'jsonwebtoken';\nimport { supabase } from '@/app/utility/supabase';\n\nexport async function GET() {\n  try {\n    const cookieStore = await cookies();\n    const token = cookieStore.get('userToken');\n\n    if (!token) {\n      return NextResponse.json({ authenticated: false }, { status: 401 });\n    }\n\n    // Verify the token\n    const secret = process.env.JWT_SECRET || 'your-secret-key';\n    try {\n      const decoded = jwt.verify(token.value, secret) as any;\n      \n      // Get user details from Supabase\n      const { data: userData, error: userError } = await supabase\n        .from('users')\n        .select('role, license_status')\n        .eq('id', decoded.userId)\n        .single();\n\n      if (userError || !userData) {\n        return NextResponse.json({ authenticated: false }, { status: 401 });\n      }\n\n      return NextResponse.json({\n        authenticated: true,\n        user: {\n          id: decoded.userId,\n          email: decoded.email,\n          role: userData.role,\n          licenseStatus: userData.license_status,\n          needsLicensePortal: userData.license_status === 'not_started' || \n                            (userData.role !== 'public' && userData.role !== 'miner' && userData.license_status === 'expired')\n        }\n      });\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      return NextResponse.json({ authenticated: false }, { status: 401 });\n    }\n  } catch (error) {\n    console.error('Auth check error:', error);\n    return NextResponse.json({ authenticated: false }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAChC,MAAM,QAAQ,YAAY,GAAG,CAAC;QAE9B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,eAAe;YAAM,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,mBAAmB;QACnB,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU,IAAI;QACzC,IAAI;YACF,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,MAAM,KAAK,EAAE;YAExC,iCAAiC;YACjC,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,4HAAA,CAAA,WAAQ,CACxD,IAAI,CAAC,SACL,MAAM,CAAC,wBACP,EAAE,CAAC,MAAM,QAAQ,MAAM,EACvB,MAAM;YAET,IAAI,aAAa,CAAC,UAAU;gBAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,eAAe;gBAAM,GAAG;oBAAE,QAAQ;gBAAI;YACnE;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,eAAe;gBACf,MAAM;oBACJ,IAAI,QAAQ,MAAM;oBAClB,OAAO,QAAQ,KAAK;oBACpB,MAAM,SAAS,IAAI;oBACnB,eAAe,SAAS,cAAc;oBACtC,oBAAoB,SAAS,cAAc,KAAK,iBAC7B,SAAS,IAAI,KAAK,YAAY,SAAS,IAAI,KAAK,WAAW,SAAS,cAAc,KAAK;gBAC5G;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,eAAe;YAAM,GAAG;gBAAE,QAAQ;YAAI;QACnE;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,eAAe;QAAM,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}}]
}